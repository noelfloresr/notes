import Head from "next/head";
import styles from "../styles/Home.module.css";
import Amplify, { withSSRContext, Storage, API } from "aws-amplify";
import config from "../src/aws-exports";
import { withAuthenticator } from "@aws-amplify/ui-react";
import "@aws-amplify/ui-react/styles.css";

import Notes from "../components/Notes";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { GetServerSideProps } from "next";
import { listNotes } from "../src/graphql/queries";
import { Note } from "../src/API";
import { useEffect, useState } from "react";
import { deleteNote } from "../src/graphql/mutations";

Amplify.configure({
  ...config,
  ssr: true,
});

const Home = (props: any) => {
  const [customNotes, setCustomNotes] = useState<Note[]>([]);

  useEffect(() => {
    (async () => {
      const notesFromAPI = props.notes;
      await Promise.all(
        notesFromAPI.map(async (note: Note) => {
          if (note.image) {
            const image = await Storage.get(note.image);
            note.image = image;
          }
          return note;
        })
      );
      setCustomNotes(props.notes);
    })();
  }, [props.notes]);

  const onDeleteNoteFromList = async (id: string) => {
    await API.graphql({
      query: deleteNote,
      variables: { input: { id } },
    });

    const newNotes = customNotes.filter((note) => note.id !== id);
    setCustomNotes(newNotes);
  };

  return (
    <div>
      <Head>
        <title>Notes App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main>
        <Notes notes={customNotes} onDeleteNoteFromList={onDeleteNoteFromList} />
      </main>
    </div>
  );
};

export default withAuthenticator(Home);

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const SSR = withSSRContext({ req });

  try {
    const response = await SSR.API.graphql({ query: listNotes });

    return {
      props: {
        notes: response.data.listNotes.items,
      },
    };
  } catch (error) {
    return {
      props: {
        notes: [],
      },
    };
  }
};
